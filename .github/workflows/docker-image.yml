name: Build and Scan Docker Image

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up image tag
        id: vars
        run: echo "tag=ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: docker build -t ${{ steps.vars.outputs.tag }} .

      - name: Push Docker image to GHCR
        run: docker push ${{ steps.vars.outputs.tag }}

      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          version: latest

      - name: Scan image with Trivy and generate HTML report
        run: |
          trivy image --format template --template "@/contrib/html.tpl" -o trivy-report.html ${{ steps.vars.outputs.tag }}

      - name: Fail if Trivy found critical/high vulnerabilities
        run: |
          trivy image --exit-code 1 --severity CRITICAL,HIGH ${{ steps.vars.outputs.tag }}

      - name: Send email with Trivy report attached
        if: always()
        run: |
          cat <<EOF > send_report.py
import smtplib
import ssl
from email.message import EmailMessage
from pathlib import Path

msg = EmailMessage()
msg["Subject"] = "üì¶ GitHub Actions - Build terminata: ${{ job.status }}"
msg["From"] = "${{ secrets.SMTP_FROM }}"
msg["To"] = "${{ secrets.SMTP_TO }}"

msg.set_content("""\
Il workflow del repository '${{ github.repository }}' √® terminato con stato: ${{ job.status }}

üîó Azione: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

Dettagli:
- Commit: ${{ github.sha }}
- Autore: ${{ github.actor }}
- Job: ${{ github.workflow }}
""")

report_path = Path("trivy-report.html")
if report_path.exists():
    with report_path.open("rb") as f:
        msg.add_attachment(
            f.read(),
            maintype="text",
            subtype="html",
            filename="trivy-report.html"
        )
else:
    print("‚ö†Ô∏è Nessun report trovato.")

context = ssl.create_default_context()
with smtplib.SMTP_SSL("${{ secrets.SMTP_HOST }}", int("${{ secrets.SMTP_PORT }}"), context=context) as smtp:
    smtp.login("${{ secrets.SMTP_USER }}", "${{ secrets.SMTP_PASSWORD }}")
    smtp.send_message(msg)
EOF

          python3 send_report.py
