name: Build and Scan Docker Image

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch: # Permette di avviare il workflow manualmente dalla UI di GitHub

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    outputs:
      # Define an output for this job
      file_to_copy_output: ${{ steps.vars.outputs.file_to_copy }}
      uploaded-file-id: ${{ steps.upload-step.outputs.artifact-id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up image tag (lowercase)
        id: vars
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME=$(echo "${REPO_LOWER}"|awk -F'/' '{print $2}')
          echo "tag=ghcr.io/${REPO_LOWER}:latest" >> $GITHUB_OUTPUT
          echo "repo_name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "file_to_copy=${REPO_NAME}_trivy-report.html" >> $GITHUB_OUTPUT

      #- name: Build Docker image
      #  run: docker build -t ${{ steps.vars.outputs.tag }} .

      #- name: Push Docker image to GHCR
      #  run: docker push ${{ steps.vars.outputs.tag }}

      #- name: Set INPUT_IMAGE_REF
      #  run: echo "INPUT_IMAGE_REF=${{ steps.vars.outputs.tag }}" >> $GITHUB_ENV

      - name: Run Trivy vulnerability scanner and save JSON report
        uses: aquasecurity/trivy-action@0.30.0
        #run: trivy image --format json -o trivy-report.json --ignore-unfixed --vuln-type os,library --severity CRITICAL,HIGH $INPUT_IMAGE_REF
        with:
          #version: latest
          image-ref: ${{ steps.vars.outputs.tag }}
          format: 'json'
          output: 'trivy-report.json'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        env:
          INPUT_IMAGE_REF: ${{ steps.vars.outputs.tag }}

      #- name: Scan image with Trivy and save JSON report
      #  run: trivy image --format json -o trivy-report.json ${{ steps.vars.outputs.tag }}

      - name: Get the trivy HTML template
        run: wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Generate HTML report from JSON
        run: trivy convert --format template --template "@$GITHUB_WORKSPACE/html.tpl" -o ${{ steps.vars.outputs.file_to_copy }} trivy-report.json

      - name: Upload artifact
        id: upload-step
        uses: actions/upload-artifact@v4
        with:
          name: uploaded-file
          path: ${{ steps.vars.outputs.file_to_copy }}
          overwrite: true
          compression-level: 0
          retention-days: 1

      - name: Fail if critical/high vulnerabilities found
        run: |
          cat trivy-report.json || ok=1
          jq '.Results[].Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH")' trivy-report.json && exit 1 || exit 0

      #- name: Send email with Trivy report attached
      #  if: always()
      #  run: |
      #    echo "import smtplib" > send_email.py
      #    echo "import ssl" >> send_email.py
      #    echo "from email.message import EmailMessage" >> send_email.py
      #    echo "from pathlib import Path" >> send_email.py
      #    echo "" >> send_email.py
      #    echo "msg = EmailMessage()" >> send_email.py
      #    echo "msg['Subject'] = 'ðŸ“¦ GitHub Actions - Build terminata: ${{ job.status }}'" >> send_email.py
      #    echo "msg['From'] = '${{ secrets.SMTP_FROM }}'" >> send_email.py
      #    echo "msg['To'] = '${{ secrets.SMTP_TO }}'" >> send_email.py
      #    echo "msg.set_content('''Il workflow del repository \"${{ github.repository }}\" Ã¨ terminato con stato: ${{ job.status }}\n\nðŸ”— Azione: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\nCommit: ${{ github.sha }}\nAutore: ${{ github.actor }}\nJob: ${{ github.workflow }}''')" >> send_email.py
      #    echo "" >> send_email.py
      #    echo "report_path = Path('trivy-report.html')" >> send_email.py
      #    echo "if report_path.exists():" >> send_email.py
      #    echo "    with report_path.open('rb') as f:" >> send_email.py
      #    echo "        msg.add_attachment(f.read(), maintype='text', subtype='html', filename='trivy-report.html')" >> send_email.py
      #    echo "" >> send_email.py
      #    echo "context = ssl.create_default_context()" >> send_email.py
      #    echo "with smtplib.SMTP_SSL('${{ secrets.SMTP_HOST }}', int('${{ secrets.SMTP_PORT }}'), context=context) as smtp:" >> send_email.py
      #    # echo "    smtp.login('${{ secrets.SMTP_USER }}', '${{ secrets.SMTP_PASSWORD }}')" >> send_email.py
      #    echo "    smtp.send_message(msg)" >> send_email.py

      #    python3 send_email.py


  push-file-to-repo:
    needs: [build-and-scan]
    secrets: inherit
    uses: Neomediatech/docker-images-scan-reports/.github/workflows/copy-file-to-another-repo.yml@main
    with:
      file_id: ${{ needs.build-and-scan.outputs.uploaded-file-id }}
      filename: ${{ needs.build-and-scan.outputs.file_to_copy_output }}
